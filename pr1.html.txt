    <style>
        :root {
            --primary: #FFD700;         /* Gold */
            --primary-dark: #d4b000;
            --secondary: #2a2a2a;       /* Light surface */
            --dark: #f5f5f5;            /* Light text */
            --light: #121212;           /* Dark background */
            --surface: #1e1e1e;
            --surface-light: #2a2a2a;
            --success: #10b981;
            --warning: #f59e0b;
            --danger: #ef4444;
            --gray: #aaaaaa;
            --gray-light: #333333;
        }

        /* Global Reset */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background-color: var(--light);
            color: var(--dark);
            line-height: 1.6;
        }

        /* Container and Layout */
        .container {
            display: flex;
            min-height: 100vh;
        }

        /* Sidebar Styles */
        .sidebar {
            width: 250px;
            background: var(--surface-light);
            box-shadow: 2px 0 10px rgba(0, 0, 0, 0.2);
            display: flex;
            flex-direction: column;
        }

        .sidebar-header {
            padding: 1.5rem;
            border-bottom: 1px solid var(--gray-light);
            display: flex;
            align-items: center;
            color: var(--primary);
        }

        .sidebar-menu {
            padding: 1rem 0;
            flex: 1;
        }

        .menu-title {
            padding: 0.5rem 1.5rem;
            font-size: 0.75rem;
            text-transform: uppercase;
            color: var(--gray);
            font-weight: 600;
        }

        .menu-item {
            display: flex;
            align-items: center;
            padding: 0.75rem 1.5rem;
            color: var(--dark);
            text-decoration: none;
            transition: all 0.2s;
        }

        .menu-item:hover {
            background-color: var(--primary);
            color: #000;
        }

        .menu-item.active {
            background-color: rgba(255, 215, 0, 0.1);
            color: var(--primary);
            border-left: 3px solid var(--primary);
        }

        .menu-item i {
            margin-right: 10px;
            width: 20px;
            text-align: center;
        }

        /* Logout Button */
        .logout-btn {
            display: flex;
            align-items: center;
            padding: 0.75rem 1.5rem;
            color: var(--danger);
            text-decoration: none;
            transition: all 0.2s;
            border-top: 1px solid var(--gray-light);
            margin-top: auto;
        }

        .logout-btn:hover {
            background-color: rgba(239, 68, 68, 0.1);
        }

        .logout-btn i {
            margin-right: 10px;
            width: 20px;
            text-align: center;
        }

        /* Main Content */
        .main-content {
            flex: 1;
            padding: 1.5rem;
            background-color: var(--light);
            overflow-y: auto;
        }

        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid var(--gray-light);
        }

        .header h1 {
            font-size: 1.5rem;
            font-weight: 600;
            color: var(--primary);
        }

        /* User Menu */
        .user-menu {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .notification-icon {
            position: relative;
            cursor: pointer;
            color: var(--gray);
        }

        .notification-badge {
            position: absolute;
            top: -6px;
            right: -10px;
            background: var(--danger);
            color: white;
            font-size: 0.65rem;
            padding: 2px 6px;
            border-radius: 50%;
        }

        .user-menu img {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            object-fit: cover;
            border: 2px solid var(--primary);
        }

        .zoom-img {
            transition: transform 0.3s ease;
        }

        .zoom-img:hover {
            transform: scale(1.2);
        }

        /* Quick Actions */
        .quick-actions {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .action-card {
            background: var(--surface);
            border-radius: 8px;
            padding: 1.5rem;
            text-align: center;
            box-shadow: 0 2px 5px rgba(0,0,0,0.3);
            transition: transform 0.2s;
            cursor: pointer;
            border-top: 4px solid var(--primary);
            color: var(--dark);
        }

        .action-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.3);
        }

        .action-card i {
            font-size: 2rem;
            color: var(--primary);
            margin-bottom: 1rem;
        }

        .action-card h3 {
            margin-bottom: 0.5rem;
        }

        .action-card p {
            color: var(--gray);
            font-size: 0.9rem;
        }

        /* Activity Log */
        .activity-card {
            background: var(--surface);
            border-radius: 8px;
            padding: 1.5rem;
            box-shadow: 0 2px 5px rgba(0,0,0,0.3);
            color: var(--dark);
        }

        .activity-card h2 {
            margin-bottom: 1.5rem;
            color: var(--primary);
        }

        .activity-item {
            display: flex;
            padding: 0.8rem 0;
            border-bottom: 1px solid var(--gray-light);
            align-items: center;
        }

        .activity-icon {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background-color: rgba(255, 215, 0, 0.1);
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 1rem;
            color: var(--primary);
        }

        .activity-content {
            flex: 1;
        }

        .activity-content h4 {
            margin-bottom: 0.3rem;
        }

        .activity-content p {
            color: var(--gray);
            font-size: 0.9rem;
        }

        .activity-time {
            color: var(--gray);
            font-size: 0.8rem;
        }

        /* Mobile Styles */
        @media (max-width: 768px) {
            .container {
                flex-direction: column;
            }

            .sidebar {
                width: 100%;
                position: fixed;
                bottom: 0;
                height: 60px;
                overflow-y: auto;
                background: var(--surface);
                z-index: 100;
            }

            .sidebar-header {
                display: none;
            }

            .sidebar-menu {
                display: flex;
                padding: 0;
            }

            .menu-title {
                display: none;
            }

            .menu-item {
                flex-direction: column;
                padding: 0.5rem;
                font-size: 0.7rem;
                text-align: center;
                flex: 1;
            }

            .menu-item i {
                margin-right: 0;
                margin-bottom: 5px;
            }

            .logout-btn {
                display: none;
            }

            .main-content {
                padding-bottom: 80px;
            }

            .header {
                flex-direction: column;
                align-items: flex-start;
            }

            .user-menu {
                margin-top: 1rem;
                width: 100%;
                justify-content: space-between;
            }

            .quick-actions {
                grid-template-columns: 1fr 1fr;
            }
        }

        @media (max-width: 480px) {
            .quick-actions {
                grid-template-columns: 1fr;
            }
        }
    </style>


        <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Toggle active state for menu items
            const menuItems = document.querySelectorAll('.menu-item');
            menuItems.forEach(item => {
                item.addEventListener('click', function() {
                    menuItems.forEach(i => i.classList.remove('active'));
                    this.classList.add('active');
                });
            });

            // Action cards click
            const actionCards = document.querySelectorAll('.action-card');
            actionCards.forEach(card => {
                card.addEventListener('click', function() {
                    const action = this.querySelector('h3').textContent;
                    console.log('Action:', action);
                });
            });

            // Notification bell click
            const notificationIcon = document.querySelector('.notification-icon');
            if (notificationIcon) {
                notificationIcon.addEventListener('click', function() {
                    alert('You have 3 new notifications');
                    this.querySelector('.notification-badge').style.display = 'none';
                });
            }

            // Responsive sidebar toggle for mobile
            function handleResize() {
                if (window.innerWidth <= 768) {
                    document.querySelector('.sidebar').classList.add('mobile');
                } else {
                    document.querySelector('.sidebar').classList.remove('mobile');
                }
            }

            window.addEventListener('resize', handleResize);
            handleResize();
        });
















-- Create the database
CREATE DATABASE IF NOT EXISTS warehouse;
USE warehouse;

-- Users table
CREATE TABLE users (
    user_id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) NOT NULL UNIQUE,
    password_hash VARCHAR(255) NOT NULL,
    role ENUM('admin', 'staff') NOT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- Product Categories (optional)
CREATE TABLE categories (
    category_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL
);

-- Products table
CREATE TABLE products (
    product_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    sku VARCHAR(50) NOT NULL UNIQUE,
    category_id INT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (category_id) REFERENCES categori(category_id)
);

-- Bins table (location in warehouse)
CREATE TABLE bins (
    bin_id INT AUTO_INCREMENT PRIMARY KEY,
    bin_code VARCHAR(20) NOT NULL UNIQUE,
    zone VARCHAR(50) NOT NULL
);

-- Inventory table (how much of a product is in a bin)
CREATE TABLE inventory (
    inventory_id INT AUTO_INCREMENT PRIMARY KEY,
    product_id INT NOT NULL,
    bin_id INT NOT NULL,
    quantity INT NOT NULL DEFAULT 0,
    FOREIGN KEY (product_id) REFERENCES products(product_id),
    FOREIGN KEY (bin_id) REFERENCES bins(bin_id),
    UNIQUE (product_id, bin_id) -- Ensures 1 row per product-bin
);

-- Inbound shipments table
CREATE TABLE inbound (
    inbound_id INT AUTO_INCREMENT PRIMARY KEY,
    product_id INT NOT NULL,
    quantity INT NOT NULL,
    bin_id INT NOT NULL,
    received_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (product_id) REFERENCES products(product_id),
    FOREIGN KEY (bin_id) REFERENCES bins(bin_id)
);

-- Outbound shipments table
CREATE TABLE outbound (
    outbound_id INT AUTO_INCREMENT PRIMARY KEY,
    product_id INT NOT NULL,
    quantity INT NOT NULL,
    bin_id INT NOT NULL,
    shipped_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (product_id) REFERENCES products(product_id),
    FOREIGN KEY (bin_id) REFERENCES bins(bin_id)
);

-- Stock transfers table
CREATE TABLE transfers (
    transfer_id INT AUTO_INCREMENT PRIMARY KEY,
    product_id INT NOT NULL,
    from_bin INT NOT NULL,
    to_bin INT NOT NULL,
    quantity INT NOT NULL,
    transferred_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (product_id) REFERENCES products(product_id),
    FOREIGN KEY (from_bin) REFERENCES bins(bin_id),
    FOREIGN KEY (to_bin) REFERENCES bins(bin_id)
);

-- Optional: Customers (useful for outbound if needed)
CREATE TABLE customers (
    customer_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100),
    phone VARCHAR(20),
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- Optional: Link outbound to customers (if needed)
ALTER TABLE outbound
ADD COLUMN customer_id INT,
ADD FOREIGN KEY (customer_id) REFERENCES customers(customer_id);












<?php
// Start session and check authentication
session_start();
if (!isset($_SESSION['user_id'])) {
    header("Location: login.php");
    exit();
}

include"conn";
    $db = new PDO("mysql:host=$db_host;dbname=$db_name;charset=utf8", $db_user, $db_pass);
    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
}  catch (PDOException $e) {
    die("Database connection failed: " . $e->getMessage());
}

// Process form submission
$success_message = '';
$error_message = '';

if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    try {
        // Validate and sanitize input
        $supplier_id = filter_input(INPUT_POST, 'supplier_id', FILTER_SANITIZE_NUMBER_INT);
        $product_id = filter_input(INPUT_POST, 'product_id', FILTER_SANITIZE_NUMBER_INT);
        $quantity = filter_input(INPUT_POST, 'quantity', FILTER_SANITIZE_NUMBER_INT);
        $location_id = filter_input(INPUT_POST, 'location_id', FILTER_SANITIZE_NUMBER_INT);
        $batch_number = filter_input(INPUT_POST, 'batch_number', FILTER_SANITIZE_STRING);
        $expiry_date = filter_input(INPUT_POST, 'expiry_date', FILTER_SANITIZE_STRING);
        $received_by = $_SESSION['user_id'];
        $notes = filter_input(INPUT_POST, 'notes', FILTER_SANITIZE_STRING);

        // Basic validation
        if (empty($product_id) || empty($quantity) || empty($location_id)) {
            throw new Exception("Required fields are missing");
        }

        // Start transaction
        $db->beginTransaction();

        // Insert receiving record
        $stmt = $db->prepare("INSERT INTO receiving (supplier_id, product_id, quantity, location_id, batch_number, expiry_date, received_by, notes, received_at) 
                             VALUES (:supplier_id, :product_id, :quantity, :location_id, :batch_number, :expiry_date, :received_by, :notes, NOW())");
        $stmt->execute([
            ':supplier_id' => $supplier_id,
            ':product_id' => $product_id,
            ':quantity' => $quantity,
            ':location_id' => $location_id,
            ':batch_number' => $batch_number,
            ':expiry_date' => $expiry_date,
            ':received_by' => $received_by,
            ':notes' => $notes
        ]);

        // Update inventory
        $stmt = $db->prepare("INSERT INTO inventory (product_id, location_id, quantity, batch_number, expiry_date)
                             VALUES (:product_id, :location_id, :quantity, :batch_number, :expiry_date)
                             ON DUPLICATE KEY UPDATE quantity = quantity + VALUES(quantity)");
        $stmt->execute([
            ':product_id' => $product_id,
            ':location_id' => $location_id,
            ':quantity' => $quantity,
            ':batch_number' => $batch_number,
            ':expiry_date' => $expiry_date
        ]);

        // Commit transaction
        $db->commit();

        $success_message = "Product received successfully!";
    } catch (Exception $e) {
        $db->rollBack();
        $error_message = "Error: " . $e->getMessage();
    }
}

// Fetch dropdown data
$suppliers = $db->query("SELECT id, name FROM suppliers ORDER BY name")->fetchAll(PDO::FETCH_ASSOC);
$products = $db->query("SELECT id, product_code, name FROM products ORDER BY name")->fetchAll(PDO::FETCH_ASSOC);
$locations = $db->query("SELECT id, zone, rack, shelf FROM locations ORDER BY zone, rack, shelf")->fetchAll(PDO::FETCH_ASSOC);
?>